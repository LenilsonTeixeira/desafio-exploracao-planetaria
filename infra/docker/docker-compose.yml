version: '3.7'
services:
  mongodb:
    image: mongo
    container_name: mongodb
    networks:
      - nw-exploracao-planetaria
    ports:
      - "27017:27017" 
  postgresql:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: planets
    ports:
      - "5432:5432"
    networks:
      - nw-exploracao-planetaria
    restart: unless-stopped
    volumes:
      - ./script:/docker-entrypoint-initdb.d
  redis:
    image: "redis:alpine"
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - nw-exploracao-planetaria
  zookeeper:
    container_name: zookeeper
    networks:
      - nw-exploracao-planetaria
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://kafka:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "9101:9101"
    networks:
      - nw-exploracao-planetaria
  ms-probe:
    image: desafio-exploracao-planetaria/ms-probe:latest
    depends_on:
      - kafka
      - postgresql
    ports:
      - 8084:8084
    hostname: ms-probe
    container_name: ms-probe
    networks:
      - nw-exploracao-planetaria
  ms-planet:
    image: desafio-exploracao-planetaria/ms-planet:latest
    depends_on:
      - kafka
      - mongodb
    ports:
      - 8080:8080
    hostname: ms-planet
    container_name: ms-planet
    networks:
      - nw-exploracao-planetaria
  ms-radar:
    image: desafio-exploracao-planetaria/ms-radar:latest
    depends_on:
      - kafka
      - redis
    ports:
      - 8085:8085
    hostname: ms-radar
    container_name: ms-radar
    environment:
      - ELASTIC_APM_SERVICE_NAME=ms-radar
      - ELASTIC_APM_SERVER_URL=http://elastic-apm:8200
    networks:
      - nw-exploracao-planetaria
  ms-impact-analyzer:
    image: desafio-exploracao-planetaria/ms-impact-analyzer:latest
    depends_on:
      - kafka
      - elasticapm
      - logstash
    ports:
      - 8087:8087
    hostname: ms-impact-analyzer
    container_name: ms-impact-analyzer
    networks:
      - nw-exploracao-planetaria
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - discovery.seed_hosts=elasticsearch
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2048m -Xmx2048m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - nw-exploracao-planetaria

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.4
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - nw-exploracao-planetaria
  elastic-apm:
    image: docker.elastic.co/apm/apm-server:7.17.4
    container_name: elastic-apm    
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    ports:
      - 8200:8200
    depends_on:
     - elasticsearch
     - kibana
    command: >
       apm-server -e
         -E apm-server.rum.enabled=true
         -E setup.kibana.host=kibana:5601
         -E setup.template.settings.index.number_of_replicas=0
         -E apm-server.kibana.enabled=true
         -E apm-server.kibana.host=kibana:5601
         -E output.elasticsearch.hosts=["elasticsearch:9200"]
    volumes:
      - elasticapm:/usr/share/apm-server/data
    networks:
      - nw-exploracao-planetaria
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/
  logstash:
    image: logstash:7.17.4
    container_name: logstash
    ports:
      - "9600:9600"
    depends_on:
      - elasticsearch
      - kafka
    volumes:
      - ./logstash/pipeline/:/usr/share/logstash/pipeline/
    networks:
      - nw-exploracao-planetaria
  grafana:
    image: grafana/grafana
    container_name: grafana
    hostname: grafana
    environment:
      -  GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    ports:
      - 3000:3000
    networks:
      - nw-exploracao-planetaria
  prometheus:
    image: prom/prometheus
    user: root
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/config:/etc/prometheus
      - ./prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    networks:
      - nw-exploracao-planetaria

volumes:
  elastic:
    driver: local
  elasticapm:
    driver: local

networks: 
  nw-exploracao-planetaria:
    driver: bridge